package components

import (
    "fmt"
    "strconv"
    "slices"

    "github.com/svuvi/theweek/models"
)

templ ArticlePreview(article *models.Article) {
    <div class="article-preview">
        <h1><a href={ templ.URL(fmt.Sprint("/", article.Slug)) }>{ article.Title }</a></h1>
        {{ text, trimmed := trimToRowsOrChars(article.TextMD, 15, 1000) }}
		@MarkdownText(text)
		if trimmed {
			<a href={ templ.URL(fmt.Sprint("/", article.Slug)) }>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é -></a>
		}
    </div>
}

templ Empty() {
}

templ MarkdownText(mdText string) {
	@templ.Raw(mdStringToHTML(mdText))
}

templ Header(authorized bool, user *models.User) {
    <header class="inter-regular">
        <div class="nav-top">
            <div class="icon">
                 <svg alt="–ü–æ–∏—Å–∫" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" style="transform: scale(1);"><path d="M16.32 14.9l5.39 5.4a1 1 0 0 1-1.42 1.4l-5.38-5.38a8 8 0 1 1 1.41-1.41zM10 16a6 6 0 1 0 0-12 6 6 0 0 0 0 12z"></path></svg>
            </div>
            <ul class="nav-list">
                <li>–•–†–û–¢–†–ê–ô–ö</li>
                <li>–ú–ò–†</li>
                <li>–°–ö–ò–¢–°–û–§–†–ï–ù–õ–Ø–ù–î–ò–Ø</li>
                <li>–ö–ê–õ–ò–ë–†–ò–Ø</li>
                <li>–¶–£–ö–£–°–ò</li>
            </ul>
            <div class="account">
                if authorized {
                    <div class="user-corner">
                        <div class="icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" style="transform: scale(1);" fill="none"><path d="M5 21C5 17.134 8.13401 14 12 14C15.866 14 19 17.134 19 21M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
                        </div>
                        <a href={ templ.URL(fmt.Sprint("/user/", user.Username)) }>{ user.Username }</a>
                    </div>
                    <div class="button-1">
                        <a href="/logout">–í–´–ô–¢–ò</a>
                    </div>
                } else {
                    <div class="button-1">
                        <a href="/login">–í–û–ô–¢–ò</a>
                    </div>
                }
            </div>
        </div>
        <div class="nav-mid">
            <div class="logo chomsky"><h1><a href="/">The Week</a></h1></div>
        </div>
        <div class="nav-bottom">
            <ul class="nav-list inter-regular">
                <li>–•—Ä–æ—Ç—Ä–∞–π–∫</li>
                <li>–ú–∏—Ä</li>
                <li>–ë–∏–∑–Ω–µ—Å</li>
                <li>–ò—Å–∫—É—Å—Å—Ç–≤–æ</li>
                <li>–ñ–∏–∑–Ω—å</li>
                <li>–ú–Ω–µ–Ω–∏—è</li>
                <li>–ú—É–∑—ã–∫–∞</li>
                <li>–ò–≥—Ä—ã</li>
                <li>–ö—É–ª–∏–Ω–∞—Ä–∏—è</li>
                <li>–ü–æ–≥–æ–¥–∞</li>
            </ul>
        </div>
    </header>
}

templ LoginForm(usernameValue, passwordValue string, usernameResult, passwordResult templ.Component) {
    <div id="login-form" class="login-form inter-regular">
        <form hx-post="/login" hx-target="#login-form" hx-swap="outerHTML">
            <label>–õ–æ–≥–∏–Ω</label>
            <input type="username" name="username" value={ usernameValue } required/>
            @usernameResult
            <label>–ü–∞—Ä–æ–ª—å</label>
			<input type="password" name="password" value={ passwordValue } required/>
            @passwordResult
            <button>–í–æ–π—Ç–∏</button>
        </form>
        <p>–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?</p>
        <a href="/register">–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</a>
    </div>
}

templ FormWarning(text string) {
    <div class="form-result warning">{ text }</div>
}

templ LoggedIn() {
    <div id="logged-in">
        <p>–í—ã –∑–∞—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!</p>
        <a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
    </div>
}

templ RegistrationForm(usernameValue, passwordValue, passwordRepeat string, usernameResult, passwordResult, passwordRepeatResult templ.Component) {
	<div id="registration-form" class="registration-form inter-regular">
		<form hx-post="/register" hx-target="#registration-form" hx-swap="outerHTML">
			<label>–õ–æ–≥–∏–Ω</label>
			<input type="username" name="username" value={ usernameValue } required/>
			@usernameResult
			<label>–ü–∞—Ä–æ–ª—å</label>
			<input type="password" name="password" value={ passwordValue } required/>
			@passwordResult
			<label>–ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è</label>
			<input type="password" name="passwordRepeat" value={ passwordRepeat } required/>
            @passwordRepeatResult
			<button>–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
		</form>
	</div>
}

templ Registered() {
    <div id="registered">
        <p>–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç!</p>
        <a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
    </div>
}

templ WritingForm(slugResult templ.Component, slug, title, textMD string) {
    <div id="writing-form" class="inter-regular">
        <form hx-post="/write" hx-target="#writing-form" hx-swap="outerHTML">
            <label>–°—Å—ã–ª–∫–∞</label>
            <input type="text" name="slug" pattern="^[a-z0-9-]+$" value={ slug } required/>
            @slugResult
            <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
            <input type="text" name="title" value={ title } required/>
            <label>–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏</label>
            <textarea name="textMD" oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"'>{ textMD }</textarea>
            <button>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </form>
    </div>
}

templ WritingSuccessful(slug string) {
    <div id="writing-form" class="inter-regular">
        <p>–°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.</p>
        <a href={ templ.URL(fmt.Sprint("/", slug)) }>–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é</a>
        <a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
    </div>
}

templ InviteTable(invites []*models.Invite) {
    <table id="invites">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>–ê–∫—Ç–∏–≤–µ–Ω</th>
                    <th>–ö–æ–¥</th>
                    <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                    <th>–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</th>
                    <th>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ID</th>
                    <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                </tr>
            </thead>
            <tbody hx-target="closest tr" hx-swap="outerHTML swap:1s">
                for _, invite := range slices.Backward(invites) {
                    <tr>
                        <td>{ strconv.Itoa(invite.ID) }</td>
                        <td>
                            if invite.IsActive {
                                ‚úÖ
                            } else {
                                ‚ùå
                            }
                        </td>
                        <td>{ invite.Code }</td>
                        <td>{ invite.CreatedAt.String() }</td>
                        <td>   
                            if invite.ClaimedAt == invite.CreatedAt {
                                -
                            } else {
                                { invite.ClaimedAt.String() }
                            }
                        </td>
                        <td>
                            if invite.ClaimedByUserID != 1 {
                                { strconv.Itoa(invite.ClaimedByUserID) }
                            }
                        </td>
                        <td><button class="button-1" hx-delete={ fmt.Sprint("/dashboard/invites/delete/", invite.Code) }>üóëÔ∏è</button></td>
                    </tr>
                }
            </tbody>
        </table>
}