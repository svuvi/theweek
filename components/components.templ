package components

import (
    "fmt"
    "strconv"
    "slices"

    "github.com/svuvi/theweek/models"
)

templ MetaTagsArticle(a *models.Article) {
    <meta property="og:type" content="article">
    <meta property="og:title" content={ a.Title }>
    <meta property="og:url" content={ fmt.Sprint("https://theweek.svuvich.nl/", a.Slug) }>
    // <meta property="og:image" content="">
    <meta property="og:description" content={ a.Description }>
    // <meta property="article:author" content="">
    // <meta property="article:published_time" content="">
}

templ MetaTagsSite() {
	<meta property="og:title" content="The Week - Новости Урбанойда"/>
	<meta property="og:description" content="Крупнейшее медиа Урбанойда
    Редакция: Роттерштадт, ул. адмирала Дориа, 34 стр.2
    Предложить новость: @the_week_urb_bot"/>
	<meta property="og:url" content="https://theweek.svuvich.nl/"/>
	<meta property="og:logo" content="https://theweek.svuvich.nl/static/logo.png"/>
	// <meta property="og:image" content="https://theweek.svuvich.nl/static/logo.png"/>
	<meta property="og:type" content="website"/>
	<meta property="og:locale" content="ru-RU"/>
}

templ ArticleCard(article *models.Article) {
    <div class="article-preview">
        <div class="text-preview">
            <a href={ templ.URL(fmt.Sprint("/", article.Slug)) }>
                <h1>{ article.Title }</h1>
                <p>{ article.Description }</p>
            </a>
        </div>
        <a href={ templ.URL(fmt.Sprint("/", article.Slug)) }>
            <div class="preview-cover">
                if article.CoverImageID != 0 {
                    <img src={ fmt.Sprint("/images/", article.CoverImageID) } alt="Картинка обложки статьи">
                }
            </div>
        </a>
    </div>
}

templ Article(article *models.Article) {
    <article>
        <div class="article-head">
            <h1>{ article.Title }</h1>
            <p>{ article.Description }</p>
            <p class="publishing-date">{ article.CreatedAt.String() }</p>
        </div>
        if article.CoverImageID != 0 {
            <img src={ fmt.Sprint("/images/", article.CoverImageID) } alt="Картинка обложки статьи">
        }
        <div class="article-content">@MarkdownText(article.TextMD)</div>
    </article>
}

templ Empty() {
}

templ MarkdownText(mdText string) {
	@templ.Raw(mdStringToHTML(mdText))
}

templ Header(user *models.User, review bool) {
    <header class="inter-regular">
        <div class="nav-top">
            <div class="icon">
                 <svg alt="Поиск" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" style="transform: scale(1);"><path d="M16.32 14.9l5.39 5.4a1 1 0 0 1-1.42 1.4l-5.38-5.38a8 8 0 1 1 1.41-1.41zM10 16a6 6 0 1 0 0-12 6 6 0 0 0 0 12z"></path></svg>
            </div>
            <ul class="nav-list">
                <li>ХРОТРАЙК</li>
                <li>МИР</li>
                <li>СКИТСОФРЕНЛЯНДИЯ</li>
                <li>КАЛИБРИЯ</li>
                <li>ЦУКУСИ</li>
            </ul>
            <div class="account">
                if user.ID != 0 {
                    <div class="user-corner">
                        <div class="icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" style="transform: scale(1);" fill="none"><path d="M5 21C5 17.134 8.13401 14 12 14C15.866 14 19 17.134 19 21M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
                        </div>
                        <a href={ templ.URL(fmt.Sprint("/user/", user.Username)) }>{ user.Username }</a>
                    </div>
                    <div>
                        <a href="/logout" class="button-1">ВЫЙТИ</a>
                    </div>
                } else {
                    <div>
                        <a href="/login" class="button-1">ВОЙТИ</a>
                    </div>
                }
            </div>
        </div>
        <div class="nav-mid">
            <div class="logo chomsky"><h1>
            if review {
                <a href="/">Review</a>
            } else {
                <a href="/">The Week</a>
            }
            </h1></div>
        </div>
        <div class="nav-bottom">
            <ul class="nav-list inter-regular">
                <li>Хротрайк</li>
                <li>Мир</li>
                <li>Бизнес</li>
                <li>Искусство</li>
                <li>Жизнь</li>
                <li>Мнения</li>
                <li>Музыка</li>
                <li>Игры</li>
                <li>Кулинария</li>
                <li>Погода</li>
            </ul>
        </div>
    </header>
}

templ LoginForm(usernameValue, passwordValue string, usernameResult, passwordResult templ.Component) {
    <div id="login-form" class="login-form inter-regular">
        <form hx-post="/login" hx-target="#login-form" hx-swap="outerHTML">
            <label>Логин</label>
            <input type="username" name="username" value={ usernameValue } required/>
            @usernameResult
            <label>Пароль</label>
			<input type="password" name="password" value={ passwordValue } required/>
            @passwordResult
            <button>Войти</button>
        </form>
        <p>Нет аккаунта?</p>
        <a href="/register">Как получить аккаунт</a>
    </div>
}

templ FormWarning(text string) {
    <div class="form-result warning">{ text }</div>
}

templ LoggedIn() {
    <div id="logged-in">
        <p>Вы зашли в аккаунт!</p>
        <a href="/">На главную</a>
    </div>
}

templ RegistrationForm(usernameValue, passwordValue, passwordRepeat string, usernameResult, passwordResult, passwordRepeatResult templ.Component) {
	<div id="registration-form" class="registration-form inter-regular">
		<form hx-post="/register" hx-target="#registration-form" hx-swap="outerHTML">
			<label>Логин</label>
			<input type="username" name="username" value={ usernameValue } required/>
			@usernameResult
			<label>Пароль</label>
			<input type="password" name="password" value={ passwordValue } required/>
			@passwordResult
			<label>Повтор пароля</label>
			<input type="password" name="passwordRepeat" value={ passwordRepeat } required/>
            @passwordRepeatResult
			<button>Зарегестрироваться</button>
		</form>
	</div>
}

templ Registered() {
    <div id="registered">
        <p>Вы успешно создали аккаунт!</p>
        <a href="/">На главную</a>
    </div>
}

templ PublishingForm(slugResult, coverResult templ.Component, a *models.Article) {
    <div id="publishing-form" class="inter-regular">
        <form hx-post={ fmt.Sprint("/dashboard/publishing/", a.ID) } hx-target="#publishing-form" hx-swap="outerHTML" enctype="multipart/form-data">
            <label for="slug">Ссылка</label>
            <input type="text" name="slug" pattern="^[a-z0-9-]+$" value={ a.Slug } required/>
            @slugResult
            <label for="title">Заголовок</label>
            <input type="text" name="title" value={ a.Title } required/>
            <label>Описание (лучше до 160 символов)</label>
            <textarea name="description" oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"'>{ a.Description }</textarea>
            <label>Текст статьи в формате Markdown разметки</label>
            <textarea name="textMD" oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"'>{ a.TextMD }</textarea>
            <label for="coverImage">Картинка обложки (загружай ТОЛЬКО уже сжатые картинки)</label>
            @coverResult
            <input type="file" name="coverImage" accept="image/*">
            <button>Отправить</button>
        </form>
    </div>
}

templ PublishingSuccessful(slug string) {
    <div id="publishing-form" class="inter-regular">
        <p>Статья опубликована.</p>
        <a href={ templ.URL(fmt.Sprint("/", slug)) }>Открыть статью</a>
        <a href="/">На главную</a>
    </div>
}

templ InviteTable(invites []*models.Invite) {
    <table id="invites">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Активен</th>
                    <th>Код</th>
                    <th>Дата создания</th>
                    <th>Дата использования</th>
                    <th>Использовано ID</th>
                    <th>Действие</th>
                </tr>
            </thead>
            <tbody hx-target="closest tr" hx-swap="outerHTML swap:1s">
                for _, invite := range slices.Backward(invites) {
                    <tr>
                        <td>{ strconv.Itoa(invite.ID) }</td>
                        <td>
                            if invite.IsActive {
                                ✅
                            } else {
                                ❌
                            }
                        </td>
                        <td>{ invite.Code }</td>
                        <td>{ invite.CreatedAt.String() }</td>
                        <td>   
                            if invite.ClaimedAt == invite.CreatedAt {
                                -
                            } else {
                                { invite.ClaimedAt.String() }
                            }
                        </td>
                        <td>
                            if invite.ClaimedByUserID != 1 {
                                { strconv.Itoa(invite.ClaimedByUserID) }
                            }
                        </td>
                        <td><button class="button-1" hx-delete={ fmt.Sprint("/dashboard/invites/delete/", invite.Code) }>🗑️</button></td>
                    </tr>
                }
            </tbody>
        </table>
}

templ UserTable(users []*models.User) {
    <table id="users">
        <thead>
            <tr>
                <th>ID</th>
                <th>Логин</th>
                <th>Время регистрации</th>
                <th>Администратор</th>
                <th>Действие</th>
            </tr>
        </thead>
        <tbody>
            for _, user := range users {
                <tr>
                    <td>{ strconv.Itoa(user.ID) }</td>
                    <td>{ user.Username }</td>
                    <td>{ user.RegisteredAt.String() }</td>
                    <td>
                        if user.IsAdmin {
                            👤
                        }
                    </td>
                    <td>
                        if user.ID == 1 {

                        } else if user.IsAdmin {
                            <button class="button-1">Убрать администратора</button>
                        } else {
                            <button class="button-1">Сделать администратором</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}